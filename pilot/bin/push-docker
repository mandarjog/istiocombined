#!/bin/bash
#
# Copyright 2017 Istio Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
################################################################################
#
# This script creates a base image for the init image that includes iptables.
#

set -ex
set -o errexit
set -o nounset
set -o pipefail

detected_OS=`uname -s 2>/dev/null || echo not`
BUILD_FLAGS="--output_groups=static"
SUFFIX=".static"
if [ "${detected_OS}" == "Darwin" ]; then # Mac OS X
    BUILD_FLAGS="--cpu=darwin"
    SUFFIX=""
fi

function docker_push() {
  im="${1}"
  if [[ "${im}" =~ 'gcr.io' ]]; then
    gcloud docker -- push "${im}"
  else
    docker push ${im}
  fi
}

hubs="gcr.io/istio-testing"
local_tag=$(whoami)_$(date +%y%m%d_%H%M%S)
tags="${local_tag}"
build_only="false"

while [[ $# -gt 0 ]]; do
    case "$1" in
        -tag) tags="$2"; shift ;;
        -hub) hubs="$2"; shift ;;
        -build-only) build_only="true";;
        *) ;;
    esac
    shift
done

# Collect artifacts for pushing
bin=$(bazel info bazel-bin)

bazel build ${BUILD_FLAGS} //pilot/cmd/... //pilot/test/...
\cp -f "${bin}/pilot/test/client/client${SUFFIX}" docker/client
\cp -f "${bin}/pilot/test/server/server${SUFFIX}" docker/server
\cp -f "${bin}/pilot/cmd/pilot-agent/pilot-agent${SUFFIX}" docker/pilot-agent
\cp -f "${bin}/pilot/cmd/pilot-discovery/pilot-discovery${SUFFIX}" docker/pilot-discovery
\cp -f "${bin}/pilot/cmd/sidecar-initializer/sidecar-initializer${SUFFIX}" docker/sidecar-initializer
\cp -f "${bin}/pilot/test/eurekamirror/eurekamirror${SUFFIX}" docker/eurekamirror

# Build and push images

IFS=',' read -ra tags <<< "${tags}"
IFS=',' read -ra hubs <<< "${hubs}"

pushd docker
  for image in app proxy proxy_init proxy_debug pilot sidecar_initializer eurekamirror; do
    local_image="${image}:${local_tag}"
    docker build -q -f "Dockerfile.${image}" -t "${local_image}" .
    for tag in ${tags[@]}; do
      for hub in ${hubs[@]}; do
        tagged_image="${hub}/${image}:${tag}"
        docker tag "${local_image}" "${tagged_image}"
        if [ "${build_only}" != "true" ]; then
            docker_push "${tagged_image}"
        fi
      done
    done
  done
popd

echo "Pushed images to $hub with tags ${tags[@]}"
